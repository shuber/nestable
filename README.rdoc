= nestable

Allows you to nest ActiveRecord records with various theories like tree, set, etc.

What makes it different than other nesting gems/plugins?

It aims to provide a standard interface to all nesting related methods no matter what theory you decide to use. 
Some theories are better for read-heavy applications and others are better for write-heavy ones but you always want 
the same information - ancestors, children, descendants, siblings, etc. Your application code shouldn't have to change 
just because you realized that you're better off storing records as a set instead of a tree.


== Installation

  gem install shuber-nestable --source http://gems.github.com
  OR
  script/plugin install git://github.com/shuber/nestable.git


== Usage

Simply call +nestable+ in your model and pass the :+theory+ that you want to use along with any options related to it (see Theories below).

  class Category < ActiveRecord::Base
    nestable :theory => :tree, :scope => :site_id
  end


== Theories

=== :tree (default)

Pros: 

* Simple and elegant - only requires a foreign key which references a node's parent.
* Quick writes


Cons: 


* Can be slow and inefficient for fetching large trees due to recursion - one query is required for each level in a tree.

Options:


* :class_name - The class name to use for the parent and children associations. Defaults to the name of the current class.
* :dependent - The dependent option for the children association. Defaults to :destroy.
* :order - The default order to use when collecting children, descendants, siblings, etc. Defaults to nil.
* :parent_column - The name of the foreign key that references a node's parent. Defaults to :parent_id.
* :scope - A field or an array of fields to scope trees to. Defaults to an empty array.


== Contact

Problems, comments, and suggestions all welcome: shuber@huberry.com[mailto:shuber@huberry.com]